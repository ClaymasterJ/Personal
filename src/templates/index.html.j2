{% extends "base.html.j2" %}

{% block content %}

{% import markdown2 as markdown %}


<div class="body" id="app" v-if="ready">

    <!-- LINKS -->
    <div class="static-tr links">

        <a class="link" v-for="(linkdict, linkname) in info.links" :href="linkdict.url" :key="linkname">
            <i :class="linkdict.icon"></i>
        </a>

    </div>

    <!-- EMAIL -->
    <a class="email-header link-unstyled" :href="info.links['Email'].url">
        <span class="email">
            <span class="name-around">me @</span>
            <span class="name">Clayton J Roberts</span>
            <span class="name-around">. com</span>
        </span>
    </a>


    <main>
        <div class="container-fluid" style="max-width: 50rem;">


            <!-- ME -->
            <div class="row align-items-center me pb-3">
                <div class="col-auto">
                    <img class="me-portrait" :src="static_url + 'images/me.jpg'">
                    </img>
                </div>
                <div class="col">
                    <span class="me-objective" v-html="from_markdown_to_html(info.me.introduction)"></span>
                </div>
            </div>

            <test></test>

            <!-- EXPERIENCE AND SKILLS -->
            <div class="row">
                <div class="col pt-3">
                    <h5 class="text-muted">Experience</h5>
                    <div class="btn-group d-flex mb-3 overflow-auto">
                        <a class="btn btn-light flex-fill" v-for="(expdict, expindex) in sortedexperience" v-scroll-to="{
                                                container: '#exps',
                                                el: '#exp' + expindex,
                                                easing: 'ease-in',
                                                force: true,
                                                cancelable: true,
                                            }" href="#">
                            {{! expdict.company.abbreviation ? expdict.company.abbreviation : expdict.company.name }}
                        </a>

                    </div>
                    <div class="overflow-auto sister-col" id="exps">

                        {# {% for item in handler.application.info["experience"] %} #}


                        <exp v-for="(expdict, expindex) in sortedexperience" :expdict="expdict" :expindex="expindex" :key="expindex">
                        </exp>



                    </div>


                </div>
                <div class="col pt-3">
                    <h5 class="text-muted" style="text-align: right;">
                        Skills (<span class="text-primary">{{! _.size(info.skills.list) }}</span>)
                    </h5>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control faf" style="font-weight: 900" placeholder="&#xf002;" aria-label="Skill Search" aria-describedby="basic-addon1" style="text-align: left;" v-model="filtersearch">
                    </div>
                    <div class="overflow-auto sister-col">
                        <div class="list-group">

                            <skill v-for="(skilldict, skillkey) in info.skills.list" :skilldict="skilldict" :skillkey="skillkey" :key="skillkey">

                            </skill>
                        </div>

                    </div>

                </div>


            </div>

    </main>

    <br />

    <footer style="text-align: right;">
        <small class="text-muted">
            Last-updated: {{! info["meta"]["last updated"] }}
        </small>
    </footer>

    <footer>
        {# <div class="links">
                <h4 class="links-list">
                    {% for linkdict in handler.application.info["links"] %}
                    <span class="link">
                        <a class="text-secondary"
                           :href="{{  linkdict['url']  }}"><i :class="{{  linkdict['url']  }}"></i>
                        </a>
                    </span>
                </h4>
            </div> #}
        <!-- <h1>Contact</h1> -->

        <div class="made-with">
            <i class="fas fa-hammer"></i>
            with
            <span class="text-primary"><i class="fas fa-heart"></i></span>
            by
            <a href="https://github.com/ClaymasterJ" class="text-muted">
                ClaymasterJ
            </a>
            {# <br /> #}
            {# <small>This website is still under development due to career obligations</small> #}
        </div>
    </footer>


</div>

</main>



</div>


{% end %}


{% block scripts %}
<script type="text/javascript">
    Vue.filter('from_markdown_to_html', function(val) {
        // Global filter function
        return mdconverter.makeHtml(val);
    });
    Vue.filter('reverse', function(value) {
        // slice to make a copy of array, then reverse the copy
        return value.slice().reverse();
    });



    // Vue.component('skill', {
    //     template: "#skill",
    //     props: [
    //         "skilldict",
    //         "skillkey",
    //     ],
    //     data: function() {
    //         return {}
    //     },
    //     computed: {
    //         doShow: function() {
    //             // `this` points to the vm instance
    //             // return true;
    //             var self = this;
    //             if (this.$parent.filterexperiance) {
    //                 return (0 <= _.indexOf(this.$parent.filterexperiance, self.skillkey))
    //             }
    //             // return true;
    //             else if (this.$parent.filtersearch) {
    //                 return (self.skillkey.includes(self.$parent.filtersearch) || (self.skilldict.parent && self.skilldict.parent.includes(self.$parent.filtersearch)));
    //             }
    //             else {
    //                 return true;
    //             }
    //
    //         },
    //         parentDict: function() {
    //             var self = this;
    //             if (self.skilldict.parent) {
    //                 return this.$parent.info.skills.list[self.skilldict.parent];
    //             }
    //             else {
    //                 return null;
    //             }
    //         },
    //
    //     },
    //     methods: {
    //         from_markdown_to_html: function(x) {
    //             return mdconverter.makeHtml(x);
    //         },
    //         sort_experience: function(x) {
    //
    //         }
    //     },
    // });
    //

    var app = new Vue({
        el: '#app',
        components: {
            VueMarkdown,
        },
        data: function() {
            return {
                ...{
                    filtersearch: null,

                    selectedexperiance: null,
                    static_url: `{% raw static_url("") %}`,
                    info: null,
                    ready: false
                },


            }
        },
        methods: {
            from_markdown_to_html: function(x) {
                return mdconverter.makeHtml(x);
            },
            getInfo: function() {
                var self = this;

                $.get('/api/info').then(function(response) {
                    console.log(response);
                    self.info = response;
                    self.ready = true;
                }, function(response) {
                    console.log(response)
                });
            }
        },
        filters: {
            from_markdown_to_html: function(x) {
                return mdconverter.makeHtml(x);
            }
        },
        beforeMount() {
            this.getInfo();
        },
        computed: {
            filterexperiance: function() {
                var self = this;
                // self.selectedexperiance = null;
                // console.log(self.selectedexperiance);
                if ( self.selectedexperiance) {
                    console.log(self.sortedexperience[self.selectedexperiance].skillList);
                }

                return self.selectedexperiance != null ? self.sortedexperience[self.selectedexperiance].skillList : null;

            },
            sortedexperience: function() {
                var self = this;
                return _.reverse(_.sortBy(self.info.experience));
            }
        }

    })

</script>
{% end %}
